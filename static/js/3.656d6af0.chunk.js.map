{"version":3,"sources":["components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/Profile.jsx"],"names":["React","Component","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","toggleEditMode","newMode","updateStatus","onChange","e","currentTarget","value","autoFocus","onBlur","onDoubleClick","ProfileInfo","profile","fullName","src","photos","large","userImageDefault","Post","message","likes","maxLength50","maxLength","AddPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","name","validate","required","mapDispatchToProps","addPost","MyPostsContainer","connect","state","posts","profilePage","postsElements","map","p","id","formData","newPostText","Profile","Preloader","ProfileC","userId","this","match","params","authUserId","history","push","getUserProfile","getStatus","compose","auth","isAuth","withRouter"],"mappings":"6LAE4BA,IAAMC,U,QCkCnBC,EAlCgB,SAACC,GAE5B,MAA8BC,oBAAS,GAAvC,mBAAKC,EAAL,KAAeC,EAAf,KACA,EAA0BF,mBAASD,EAAMI,QAAzC,mBAAKA,EAAL,KAAaC,EAAb,KAEAC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAEV,IAAMG,EAAiB,SAACC,GACfA,GACDR,EAAMS,aAAaL,GAEvBD,EAAYK,IAOhB,OACI,8BACMN,EAIE,8BACI,uBAAOQ,SAXF,SAACC,GAClBN,EAAUM,EAAEC,cAAcC,QAUiBC,WAAW,EAAMC,OAAQ,kBAAMR,GAAe,IAAQM,MAAOT,MAJhG,qBAAKY,cAAe,kBAAMT,GAAe,IAAzC,SACKP,EAAMI,QAAU,uCCXtBa,EAVK,SAACjB,GACjB,OACI,gCACI,6BAAKA,EAAMkB,QAAQC,WACnB,qBAAKC,IAAmC,MAA9BpB,EAAMkB,QAAQG,OAAOC,MAAgBtB,EAAMkB,QAAQG,OAAOC,MAAQC,MAC5E,cAAC,EAAD,CAAwBd,aAAcT,EAAMS,aAAcL,OAAQJ,EAAMI,a,QCArEoB,EARF,SAACxB,GACV,OACI,gCACKA,EAAMyB,QADX,MACuBzB,EAAM0B,U,0CCG/BC,EAAcC,YAAU,IAaxBC,EAAmBC,YAAU,CAC/BC,KAAM,WADeD,EAXL,SAAC9B,GACjB,OACI,uBAAMgC,SAAUhC,EAAMiC,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,YAAa,iBAAkBC,KAAM,cAAeC,SAAU,CAACC,IAAUb,OAEzG,oDA6BNc,EAAqB,CACvBC,aAKWC,EAFUC,aARD,SAACC,GAAD,MAAY,CAChCC,MAAOD,EAAME,YAAYD,SAOqBL,EAAzBG,EAxBT,SAAC5C,GACb,IAAIgD,EAAgBhD,EAAM8C,MAAMG,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAMzB,QAASyB,EAAEzB,QAAoBC,MAAOwB,EAAExB,OAAfwB,EAAEC,OAM1E,OACI,gCACI,0CACCH,EACD,cAACnB,EAAD,CAAkBG,SARX,SAACoB,GACZpD,EAAM0C,QAAQU,EAASC,sB,uBCpBzBC,EAAU,SAACtD,GACb,OAAKA,EAAMkB,QAIP,gCACI,cAAC,EAAD,2BAAiBlB,GAAjB,IAAwBkB,QAASlB,EAAMkB,WACvC,cAAC,EAAD,OALG,cAACqC,EAAA,EAAD,KAUTC,E,uKACF,WACI,IAAIC,EAASC,KAAK1D,MAAM2D,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAK1D,MAAM6D,aAEhBH,KAAK1D,MAAM8D,QAAQC,KAAK,UAGhCL,KAAK1D,MAAMgE,eAAeP,GAC1BC,KAAK1D,MAAMiE,UAAUR,K,oBAGzB,WACI,OACI,cAAC,EAAD,eAAaC,KAAK1D,Y,GAfPH,IAAMC,WA2BvB2C,EAAqB,CACvBuB,mBACAC,cACAxD,kBAGWyD,sBACXtB,aAdoB,SAACC,GAAD,MAAY,CAChC3B,QAAS2B,EAAME,YAAY7B,QAC3Bd,OAAQyC,EAAME,YAAY3C,OAC1ByD,WAAYhB,EAAMsB,KAAKV,OACvBW,OAAQvB,EAAMsB,KAAKC,UAUM3B,GACzB4B,IAFWH,CAIbV","file":"static/js/3.656d6af0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass ProfileStatus extends React.Component {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    };\r\n\r\n    toggleEditMode = (mode) => {\r\n        if (!mode) {\r\n            // this.setState({})\r\n            this.props.updateStatus(this.state.status);\r\n        }\r\n        this.setState({editMode: mode});\r\n    };\r\n\r\n    statusChange = (e) => {\r\n        this.setState({\r\n            status: e.target.value\r\n        });\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode ?\r\n                    <div onDoubleClick={() => this.toggleEditMode(true)}>\r\n                        {this.props.status || 'There is no status right now...'}\r\n                    </div> :\r\n                    <div>\r\n                        <input onChange={this.statusChange} autoFocus={true} onBlur={() => this.toggleEditMode(false)} value={this.state.status}/>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import React, {useEffect, useState} from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const toggleEditMode = (newMode) => {\r\n        if (!newMode) {\r\n            props.updateStatus(status);\r\n        }\r\n        setEditMode(newMode);\r\n    };\r\n\r\n    const statusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!editMode ?\r\n                <div onDoubleClick={() => toggleEditMode(true)}>\r\n                    {props.status || 'There is no status right now...'}\r\n                </div> :\r\n                <div>\r\n                    <input onChange={statusChange} autoFocus={true} onBlur={() => toggleEditMode(false)} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport userImageDefault from '../../../assets/images/userImageDefault.png';\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>{props.profile.fullName}</h1>\r\n            <img src={props.profile.photos.large != null ? props.profile.photos.large : userImageDefault}/>\r\n            <ProfileStatusWithHooks updateStatus={props.updateStatus} status={props.status}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div>\r\n            {props.message} / {props.likes}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Post;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Post from \"./Post/Post\";\r\nimport {addPost} from \"../../../redux/profileReducer\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLength, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength50 = maxLength(50);\r\n\r\nconst AddPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} placeholder={'Enter new post'} name={'newPostText'} validate={[required, maxLength50]} />\r\n            </div>\r\n            <button>Add post</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst AddPostFormRedux = reduxForm({\r\n    form: 'addPost'\r\n})(AddPostForm);\r\n\r\nconst MyPosts = (props) => {\r\n    let postsElements = props.posts.map(p => <Post message={p.message} key={p.id} likes={p.likes}/>);\r\n\r\n    let onSubmit = (formData) => {\r\n        props.addPost(formData.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>My posts</h1>\r\n            {postsElements}\r\n            <AddPostFormRedux onSubmit={onSubmit}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    posts: state.profilePage.posts,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    addPost\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profileReducer\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nconst Profile = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>;\r\n    }\r\n    return (\r\n        <div>\r\n            <ProfileInfo {...props} profile={props.profile}/>\r\n            <MyPosts/>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass ProfileC extends React.Component {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withRouter,\r\n    // withAuthRedirect,\r\n)(ProfileC);"],"sourceRoot":""}