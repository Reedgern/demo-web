{"version":3,"sources":["components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/common/WarningMessage/WarningMessage.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/common/WarningMessage/WarningMessage.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/Profile.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","toggleEditMode","newMode","updateStatus","onChange","e","currentTarget","value","autoFocus","onBlur","className","profileStyles","hintInfo","isOwner","onDoubleClick","reduxForm","form","onSubmit","handleSubmit","error","errorStyles","summaryError","Field","placeholder","name","component","Input","type","Textarea","Object","entries","profile","contacts","map","entry","title","Contact","contactTitle","contactValue","target","href","ProfileData","style","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo","saveImage","saveProfile","avatar","s","profileImage","src","photos","large","userImageDefault","files","profileInfo","initialValues","formData","then","Post","message","likes","WarningMessage","maxLength50","maxLength","AddPostFormRedux","validate","required","mapDispatchToProps","addPost","MyPostsContainer","connect","state","posts","profilePage","postsElements","p","id","newPostText","Profile","gridWrapper","Preloader","ProfileC","refreshProfile","userId","match","params","authUserId","getUserProfile","getStatus","history","push","this","prevProps","prevState","snapshot","isFetching","isAuth","React","Component","compose","auth","withRouter"],"mappings":"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","file":"static/js/3.34820416.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridWrapper\":\"Profile_gridWrapper__C81pU\",\"avatar\":\"Profile_avatar__3fLoR\",\"profileInfo\":\"Profile_profileInfo__3tojy\",\"posts\":\"Profile_posts__51ubj\",\"hintInfo\":\"Profile_hintInfo__2VCEl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileImage\":\"ProfileInfo_profileImage__2yN_P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"WarningMessage_message__3kPz6\"};","import React, {useEffect, useState} from \"react\";\r\nimport profileStyles from '../Profile.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const toggleEditMode = (newMode) => {\r\n        if (!newMode) {\r\n            props.updateStatus(status);\r\n        }\r\n        setEditMode(newMode);\r\n    };\r\n\r\n    const statusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {!editMode ? <>\r\n                    <div onDoubleClick={() => props.isOwner && toggleEditMode(true)}>\r\n                        <span><b>Status</b>: </span>{props.status || 'There is no status right now...'}\r\n                    </div>\r\n                    <span className={profileStyles.hintInfo}>{props.isOwner && 'Change the status by double-clicking on the text!'}</span>\r\n                </> :\r\n                <>\r\n                    <span><b>Status</b>: </span><input onChange={statusChange} autoFocus={true} onBlur={() => toggleEditMode(false)}\r\n                           value={status}/>\r\n                    <div>\r\n                        <span className={profileStyles.hintInfo}>{props.isOwner && 'Save the status by clicking somewhere outside the input field!'}</span>\r\n                    </div>\r\n                </>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport errorStyles from '../../common/FormsControls/FormsControls.module.css';\r\n\r\nconst ProfileDataForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            {props.error ?\r\n            <div className={errorStyles.summaryError}>\r\n                {props.error}\r\n            </div>: null}\r\n            <button>Save changes</button>\r\n            <div>\r\n                <b>Fullname</b>: <Field placeholder={'Fullname'} name={'fullName'} component={Input}/>\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: <Field name={'lookingForAJob'} component={'input'} type={'checkbox'}/>\r\n            </div>\r\n            <div>\r\n                <b>Professional skills</b>: <Field name={'lookingForAJobDescription'} component={Textarea}/>\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: <Field placeholder={'About me'} name={'aboutMe'} component={Textarea}/>\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b>\r\n                {Object.entries(props.profile.contacts).map(entry => {\r\n                    let [title, value] = entry;\r\n                    return (\r\n                        <div>\r\n                            <b>{title}</b>: <Field name={`contacts.${title}`} component={Input} />\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default reduxForm({form: 'profileData'})(ProfileDataForm);","import React, {useState} from \"react\";\r\nimport userImageDefault from '../../../assets/images/userImageDefault.png';\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport s from './ProfileInfo.module.css';\r\nimport profileStyles from '../Profile.module.css';\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    if (contactValue) {\r\n        return (\r\n            <>\r\n                <b>{contactTitle}</b>: <a target={'_blank'} href={contactValue}>{contactValue}</a>\r\n            </>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nconst ProfileData = ({profile, isOwner, toggleEditMode}) => {\r\n    return (\r\n        <>\r\n            {\r\n                isOwner &&\r\n                <div style={{'marginLeft': '20%'}}>\r\n                    <button style={{'text-align': 'center'}} onClick={toggleEditMode}>Edit profile info</button>\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>Fullname</b>: {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {profile.lookingForAJob ?\r\n                <>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </> :\r\n                null}\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b>\r\n                <ul>\r\n                    {Object.entries(profile.contacts).map(entry => {\r\n                        let [title, value] = entry;\r\n                        return value ? <li><Contact key={title} contactTitle={title} contactValue={value}/></li> : null\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst ProfileInfo = ({profile, updateStatus, status, isOwner, saveImage, saveProfile}) => {\r\n    const onImageSelected = (e) => {\r\n        saveImage(e.target.files[0]);\r\n    };\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={profileStyles.avatar}>\r\n                <img className={s.profileImage}\r\n                     src={profile.photos.large != null ? profile.photos.large : userImageDefault}/>\r\n                <div>{isOwner ? <input type={'file'} onChange={onImageSelected} /> : null}</div>\r\n            </div>\r\n            <div className={profileStyles.profileInfo}>\r\n                {editMode ? <ProfileDataForm profile={profile} initialValues={profile} onSubmit={onSubmit}/> :\r\n                    <ProfileData toggleEditMode={() => setEditMode(true)} isOwner={isOwner} profile={profile}/>}\r\n                <ProfileStatusWithHooks isOwner={isOwner} updateStatus={updateStatus} status={status}/>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div>\r\n            <strong>Text</strong>: {props.message} // <strong>Likes</strong>: {props.likes}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Post;","import React from \"react\";\r\nimport s from './WarningMessage.module.css';\r\n\r\nconst WarningMessage = (props) => {\r\n    return (\r\n        <div className={s.message}>\r\n            <h2>Attention</h2>\r\n            <p>Since this section is still being developing some elements may work inappropriately.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WarningMessage;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Post from \"./Post/Post\";\r\nimport {addPost} from \"../../../redux/profileReducer\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLength, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport s from '../Profile.module.css'\r\nimport WarningMessage from \"../../common/WarningMessage/WarningMessage\";\r\n\r\nconst maxLength50 = maxLength(50);\r\n\r\nconst AddPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} placeholder={'Enter new post'} name={'newPostText'} validate={[required, maxLength50]} />\r\n            </div>\r\n            <button>Add post</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst AddPostFormRedux = reduxForm({\r\n    form: 'addPost'\r\n})(AddPostForm);\r\n\r\nconst MyPosts = (props) => {\r\n    let postsElements = props.posts.map(p => <Post message={p.message} key={p.id} likes={p.likes}/>);\r\n\r\n    let onSubmit = (formData) => {\r\n        props.addPost(formData.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={s.posts}>\r\n            <WarningMessage/>\r\n            <h1>My posts</h1>\r\n            {postsElements}\r\n            {props.isOwner && <AddPostFormRedux onSubmit={onSubmit}/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    posts: state.profilePage.posts,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    addPost\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, saveImage, saveProfile, updateStatus} from \"../../redux/profileReducer\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport s from './Profile.module.css';\r\n\r\nconst Profile = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>;\r\n    }\r\n    return (\r\n        <div className={s.profile + ' ' + s.gridWrapper}>\r\n            <ProfileInfo {...props} />\r\n            <MyPosts isOwner={props.isOwner}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass ProfileC extends React.Component {\r\n    refreshProfile = () => {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n                return;\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.props.isFetching) {\r\n            return <Preloader/>;\r\n        }\r\n        return (\r\n            <Profile {...this.props} isOwner={!this.props.match.params.userId && this.props.isAuth} />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n    isFetching: state.profilePage.isFetching\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    saveImage,\r\n    saveProfile\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withRouter,\r\n    // withAuthRedirect,\r\n)(ProfileC);"],"sourceRoot":""}